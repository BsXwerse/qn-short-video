// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Video {
  id           Int     @id @default(autoincrement())
  uploder      User    @relation(name: "upload", fields: [uploderId], references: [id])
  uploderId    String
  title        String
  introduction String?
  likes        Int     @default(0)
  views        Int     @default(0)
  url          String?
  coverUrl     String?
  tags         Tag[]
  favoritedBy  User[]  @relation("favorites")
}

model Tag {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  videos      Video[]
}

model User {
  id            String    @id @default(cuid())
  role          Role      @default(USER)
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  uploaded      Video[]   @relation("upload")
  favorites     Video[]   @relation("favorites")
  following     User[]    @relation("UserFollows")
  followedBy    User[]    @relation("UserFollows")
  accounts      Account[]
  sessions      Session[]
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
